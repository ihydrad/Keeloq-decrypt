
HCS200_decoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  00800060  00800060  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c4  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000559  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  0000101d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035c  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014f  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	36 c0       	rjmp	.+108    	; 0x78 <__vector_5>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 3b       	cpi	r26, 0xB0	; 176
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	28 d1       	rcall	.+592    	; 0x294 <main>
  44:	4b c1       	rjmp	.+662    	; 0x2dc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <UART_init>:
uint8_t HCS_bit_counter;                // счетчик считанных бит данных
uint32_t read_ID;

void UART_init(void)
{
	DDRD|=(1<<1);
  48:	89 9a       	sbi	0x11, 1	; 17
	PORTD|=(1<<1)|(1<<0);
  4a:	82 b3       	in	r24, 0x12	; 18
  4c:	83 60       	ori	r24, 0x03	; 3
  4e:	82 bb       	out	0x12, r24	; 18
	UBRRH=0;
  50:	10 bc       	out	0x20, r1	; 32
	UBRRL=_38400_kbps;				  //38400
  52:	89 e1       	ldi	r24, 0x19	; 25
  54:	89 b9       	out	0x09, r24	; 9
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  56:	80 b5       	in	r24, 0x20	; 32
  58:	86 68       	ori	r24, 0x86	; 134
  5a:	80 bd       	out	0x20, r24	; 32
	UCSRB|=(1<<TXEN);
  5c:	53 9a       	sbi	0x0a, 3	; 10
  5e:	08 95       	ret

00000060 <transmit_UART>:
}

void transmit_UART(unsigned char byte)
{
	while((UCSRA&(1<<UDRE))==0);
  60:	5d 9b       	sbis	0x0b, 5	; 11
  62:	fe cf       	rjmp	.-4      	; 0x60 <transmit_UART>
	UDR = byte;
  64:	8c b9       	out	0x0c, r24	; 12
  66:	08 95       	ret

00000068 <KEELOQ_init>:
}


void KEELOQ_init(void)
{
	TCCR1B |= (0 << ICNC1)|(1 << CS11)|(1 << ICES1); // Активируем входной подавитель шума, предделитель на 8, устанавливаем прерывание по нарастающему фронту импульса
  68:	8e b5       	in	r24, 0x2e	; 46
  6a:	82 64       	ori	r24, 0x42	; 66
  6c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TICIE1)|(1<<TOIE0); // Разрешаем прерывание по захвату// и переполнению|(1 << TOIE1)
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	81 62       	ori	r24, 0x21	; 33
  72:	89 bf       	out	0x39, r24	; 57
	sei();
  74:	78 94       	sei
  76:	08 95       	ret

00000078 <__vector_5>:
}

// Прерывание по захвату Таймера/счетчика 1
ISR(TIMER1_CAPT_vect)
{
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	2f 93       	push	r18
  84:	3f 93       	push	r19
  86:	4f 93       	push	r20
  88:	5f 93       	push	r21
  8a:	6f 93       	push	r22
  8c:	7f 93       	push	r23
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
  92:	af 93       	push	r26
  94:	bf 93       	push	r27
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	/*	счет до 65535 16MHz делитель на 2 = 1 count=0,5us max count=32767,5us	*/
	his_ICR1 = new_ICR1;
  9e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <new_ICR1>
  a2:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <new_ICR1+0x1>
  a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <his_ICR1+0x1>
  aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <his_ICR1>
	new_ICR1 = ICR1;
  ae:	86 b5       	in	r24, 0x26	; 38
  b0:	97 b5       	in	r25, 0x27	; 39
  b2:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <new_ICR1+0x1>
  b6:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <new_ICR1>
	vect_INVERT;
  ba:	9e b5       	in	r25, 0x2e	; 46
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	89 27       	eor	r24, r25
  c0:	8e bd       	out	0x2e, r24	; 46
	TCNT0 = 0;
  c2:	12 be       	out	0x32, r1	; 50
	CycleCount = new_ICR1 - his_ICR1;
  c4:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <new_ICR1>
  c8:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <new_ICR1+0x1>
  cc:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <his_ICR1>
  d0:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <his_ICR1+0x1>
  d4:	82 1b       	sub	r24, r18
  d6:	93 0b       	sbc	r25, r19
  d8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <CycleCount+0x1>
  dc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <CycleCount>
	/*Preamble detect*/
	if (Preamble_count<12)
  e0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  e4:	2c 30       	cpi	r18, 0x0C	; 12
  e6:	00 f5       	brcc	.+64     	; 0x128 <__vector_5+0xb0>
	{
		if (detect_vect == HIGH_interupt)
  e8:	0e b4       	in	r0, 0x2e	; 46
  ea:	06 fc       	sbrc	r0, 6
  ec:	0c c0       	rjmp	.+24     	; 0x106 <__vector_5+0x8e>
		{
			if (((CycleCount > 500) && (CycleCount < 1000)) || Preamble_count == 0){} 
  ee:	ac 01       	movw	r20, r24
  f0:	45 5f       	subi	r20, 0xF5	; 245
  f2:	51 40       	sbci	r21, 0x01	; 1
  f4:	43 3f       	cpi	r20, 0xF3	; 243
  f6:	51 40       	sbci	r21, 0x01	; 1
  f8:	b8 f0       	brcs	.+46     	; 0x128 <__vector_5+0xb0>
  fa:	22 23       	and	r18, r18
  fc:	09 f4       	brne	.+2      	; 0x100 <__vector_5+0x88>
  fe:	b7 c0       	rjmp	.+366    	; 0x26e <__vector_5+0x1f6>
			else
			{
				Preamble_count = 0;
 100:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				return;
 104:	b4 c0       	rjmp	.+360    	; 0x26e <__vector_5+0x1f6>
			}
		} 
		else
		{
			// конец импульса преамбулы
			if((CycleCount > 500) && (CycleCount < 1000))
 106:	85 5f       	subi	r24, 0xF5	; 245
 108:	91 40       	sbci	r25, 0x01	; 1
 10a:	83 3f       	cpi	r24, 0xF3	; 243
 10c:	91 40       	sbci	r25, 0x01	; 1
 10e:	48 f4       	brcc	.+18     	; 0x122 <__vector_5+0xaa>
			{
				// поймали импульс преамбулы
				Preamble_count ++;
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
				if(Preamble_count == 12)
 116:	2c 30       	cpi	r18, 0x0C	; 12
 118:	09 f0       	breq	.+2      	; 0x11c <__vector_5+0xa4>
 11a:	a9 c0       	rjmp	.+338    	; 0x26e <__vector_5+0x1f6>
				{
					// словили преамбулу
					HCS_bit_counter = 0;
 11c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <HCS_bit_counter>
					return;
 120:	a6 c0       	rjmp	.+332    	; 0x26e <__vector_5+0x1f6>
				}
			}
			else
			{
				// поймали какую то фигню
				Preamble_count = 0; // сбрасываем счетчик пойманных импульсов преамбулы
 122:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				return;
 126:	a3 c0       	rjmp	.+326    	; 0x26e <__vector_5+0x1f6>
			}
		}
	}
	/* загрузка 64 bit данных */
	if(Preamble_count == 12)
 128:	2c 30       	cpi	r18, 0x0C	; 12
 12a:	09 f0       	breq	.+2      	; 0x12e <__vector_5+0xb6>
 12c:	a0 c0       	rjmp	.+320    	; 0x26e <__vector_5+0x1f6>
	{
		if(detect_vect == HIGH_interupt)
 12e:	0e b4       	in	r0, 0x2e	; 46
 130:	06 fc       	sbrc	r0, 6
 132:	10 c0       	rjmp	.+32     	; 0x154 <__vector_5+0xdc>
		{
			if(((CycleCount > 600) && (CycleCount < 1800)) || HCS_bit_counter == 0){}
 134:	89 55       	subi	r24, 0x59	; 89
 136:	92 40       	sbci	r25, 0x02	; 2
 138:	8f 3a       	cpi	r24, 0xAF	; 175
 13a:	94 40       	sbci	r25, 0x04	; 4
 13c:	08 f4       	brcc	.+2      	; 0x140 <__vector_5+0xc8>
 13e:	97 c0       	rjmp	.+302    	; 0x26e <__vector_5+0x1f6>
 140:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <HCS_bit_counter>
 144:	88 23       	and	r24, r24
 146:	09 f4       	brne	.+2      	; 0x14a <__vector_5+0xd2>
 148:	92 c0       	rjmp	.+292    	; 0x26e <__vector_5+0x1f6>
			else
			{
				// неправильная пауза между импульсами
				CycleCount = 0;
 14a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <CycleCount+0x1>
 14e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <CycleCount>
				return;
 152:	8d c0       	rjmp	.+282    	; 0x26e <__vector_5+0x1f6>
			}
		}
		else
		{
			// конец импульса данных
			if((CycleCount > 600) && (CycleCount < 1800))
 154:	9c 01       	movw	r18, r24
 156:	29 55       	subi	r18, 0x59	; 89
 158:	32 40       	sbci	r19, 0x02	; 2
 15a:	2f 3a       	cpi	r18, 0xAF	; 175
 15c:	34 40       	sbci	r19, 0x04	; 4
 15e:	08 f0       	brcs	.+2      	; 0x162 <__vector_5+0xea>
 160:	84 c0       	rjmp	.+264    	; 0x26a <__vector_5+0x1f2>
			{
				RF_bufer[65 - HCS_bit_counter] = (CycleCount > 1000) ? 0 : 1; // импульс больше, чем половина от Те * 3 поймали 0, иначе 1
 162:	20 91 a7 00 	lds	r18, 0x00A7	; 0x8000a7 <HCS_bit_counter>
 166:	e1 e4       	ldi	r30, 0x41	; 65
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e2 1b       	sub	r30, r18
 16c:	f1 09       	sbc	r31, r1
 16e:	ed 59       	subi	r30, 0x9D	; 157
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	31 e0       	ldi	r19, 0x01	; 1
 174:	89 3e       	cpi	r24, 0xE9	; 233
 176:	93 40       	sbci	r25, 0x03	; 3
 178:	08 f0       	brcs	.+2      	; 0x17c <__vector_5+0x104>
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	30 83       	st	Z, r19
				HCS_bit_counter++;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	82 0f       	add	r24, r18
 182:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <HCS_bit_counter>
				if(HCS_bit_counter == 66)
 186:	82 34       	cpi	r24, 0x42	; 66
 188:	09 f0       	breq	.+2      	; 0x18c <__vector_5+0x114>
 18a:	71 c0       	rjmp	.+226    	; 0x26e <__vector_5+0x1f6>
				{
					/* Приняты все 66 бит */
					reciver_full = 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <reciver_full>
					Preamble_count = 0; // сбрасываем счетчик преамбулы
 192:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 196:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <read_ID>
 19a:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <read_ID+0x1>
 19e:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <read_ID+0x2>
 1a2:	70 91 af 00 	lds	r23, 0x00AF	; 0x8000af <read_ID+0x3>
 1a6:	e9 e6       	ldi	r30, 0x69	; 105
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
						{
							read_ID |= (1<<(i-6));
						} 
						else
						{
							read_ID &=~(1<<(i-6));
 1ae:	c1 e0       	ldi	r28, 0x01	; 1
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
					reciver_full = 1;
					Preamble_count = 0; // сбрасываем счетчик преамбулы
					//записываем ID передатчика
					for(uint8_t i = 6; i < 34; i++)
					{
						if (RF_bufer[i] == 1)
 1b2:	81 91       	ld	r24, Z+
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	81 f4       	brne	.+32     	; 0x1d8 <__vector_5+0x160>
						{
							read_ID |= (1<<(i-6));
 1b8:	ce 01       	movw	r24, r28
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_5+0x14a>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <__vector_5+0x146>
 1c6:	09 2e       	mov	r0, r25
 1c8:	00 0c       	add	r0, r0
 1ca:	aa 0b       	sbc	r26, r26
 1cc:	bb 0b       	sbc	r27, r27
 1ce:	48 2b       	or	r20, r24
 1d0:	59 2b       	or	r21, r25
 1d2:	6a 2b       	or	r22, r26
 1d4:	7b 2b       	or	r23, r27
 1d6:	11 c0       	rjmp	.+34     	; 0x1fa <__vector_5+0x182>
						} 
						else
						{
							read_ID &=~(1<<(i-6));
 1d8:	ce 01       	movw	r24, r28
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__vector_5+0x16a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <__vector_5+0x166>
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	09 2e       	mov	r0, r25
 1ec:	00 0c       	add	r0, r0
 1ee:	aa 0b       	sbc	r26, r26
 1f0:	bb 0b       	sbc	r27, r27
 1f2:	48 23       	and	r20, r24
 1f4:	59 23       	and	r21, r25
 1f6:	6a 23       	and	r22, r26
 1f8:	7b 23       	and	r23, r27
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
				{
					/* Приняты все 66 бит */
					reciver_full = 1;
					Preamble_count = 0; // сбрасываем счетчик преамбулы
					//записываем ID передатчика
					for(uint8_t i = 6; i < 34; i++)
 1fe:	2c 31       	cpi	r18, 0x1C	; 28
 200:	31 05       	cpc	r19, r1
 202:	b9 f6       	brne	.-82     	; 0x1b2 <__vector_5+0x13a>
 204:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <read_ID>
 208:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <read_ID+0x1>
 20c:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <read_ID+0x2>
 210:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <read_ID+0x3>
						{
							read_ID &=~(1<<(i-6));
						}
					}
					//идентификация нашего передатчика
					if ((read_ID&0xFFFFFFF) == (control_ID&0xFFFFFFF))
 214:	7f 70       	andi	r23, 0x0F	; 15
 216:	41 38       	cpi	r20, 0x81	; 129
 218:	52 43       	sbci	r21, 0x32	; 50
 21a:	61 05       	cpc	r22, r1
 21c:	71 05       	cpc	r23, r1
 21e:	39 f5       	brne	.+78     	; 0x26e <__vector_5+0x1f6>
 220:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <button_code>
 224:	e5 e6       	ldi	r30, 0x65	; 101
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
							{
								button_code |= (1<<(i-2));
							}
							else
							{
								button_code &=~(1<<(i-2));
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	70 e0       	ldi	r23, 0x00	; 0
					//идентификация нашего передатчика
					if ((read_ID&0xFFFFFFF) == (control_ID&0xFFFFFFF))
					{
						for (uint8_t i = 2; i < 6; i++)
						{
							if (RF_bufer[i] == 1)
 230:	21 91       	ld	r18, Z+
 232:	21 30       	cpi	r18, 0x01	; 1
 234:	49 f4       	brne	.+18     	; 0x248 <__vector_5+0x1d0>
							{
								button_code |= (1<<(i-2));
 236:	9b 01       	movw	r18, r22
 238:	08 2e       	mov	r0, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_5+0x1c8>
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <__vector_5+0x1c4>
 244:	42 2b       	or	r20, r18
 246:	09 c0       	rjmp	.+18     	; 0x25a <__vector_5+0x1e2>
							}
							else
							{
								button_code &=~(1<<(i-2));
 248:	9b 01       	movw	r18, r22
 24a:	08 2e       	mov	r0, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_5+0x1da>
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <__vector_5+0x1d6>
 256:	20 95       	com	r18
 258:	42 23       	and	r20, r18
 25a:	01 96       	adiw	r24, 0x01	; 1
						}
					}
					//идентификация нашего передатчика
					if ((read_ID&0xFFFFFFF) == (control_ID&0xFFFFFFF))
					{
						for (uint8_t i = 2; i < 6; i++)
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	91 05       	cpc	r25, r1
 260:	39 f7       	brne	.-50     	; 0x230 <__vector_5+0x1b8>
 262:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <button_code>
							else
							{
								button_code &=~(1<<(i-2));
							}
						}
						PORTC = button_code;
 266:	45 bb       	out	0x15, r20	; 21
 268:	02 c0       	rjmp	.+4      	; 0x26e <__vector_5+0x1f6>
				}
			}
			else
			{
				/* сбой приема */
				Preamble_count = 0;
 26a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				return;
			}
		}	
	}
}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <main>:

int main(void)
{
    /* Replace with your application code */
	DDRC|=(1<<0)|(1<<1)|(1<<2)|(1<<3);//прямой вывод кода кнопки в порт PORTC0..3
 294:	84 b3       	in	r24, 0x14	; 20
 296:	8f 60       	ori	r24, 0x0F	; 15
 298:	84 bb       	out	0x14, r24	; 20
	UART_init();
 29a:	d6 de       	rcall	.-596    	; 0x48 <UART_init>
	KEELOQ_init();
 29c:	e5 de       	rcall	.-566    	; 0x68 <KEELOQ_init>
		{
			button_code = 0;
			transmit_UART((uint8_t)((read_ID>>24)&0x0F));
			transmit_UART((uint8_t)((read_ID>>16)&0xFF));
			transmit_UART((uint8_t)((read_ID>>8)&0xFF));
			transmit_UART((uint8_t)(read_ID&0xFF));
 29e:	cc ea       	ldi	r28, 0xAC	; 172
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
	DDRC|=(1<<0)|(1<<1)|(1<<2)|(1<<3);//прямой вывод кода кнопки в порт PORTC0..3
	UART_init();
	KEELOQ_init();
    while (1) 
    {
		if (reciver_full == 1)
 2a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reciver_full>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0xe>
		{
			button_code = 0;
 2aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <button_code>
			transmit_UART((uint8_t)((read_ID>>24)&0x0F));
 2ae:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <read_ID+0x3>
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	d5 de       	rcall	.-598    	; 0x60 <transmit_UART>
			transmit_UART((uint8_t)((read_ID>>16)&0xFF));
 2b6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <read_ID+0x2>
 2ba:	d2 de       	rcall	.-604    	; 0x60 <transmit_UART>
			transmit_UART((uint8_t)((read_ID>>8)&0xFF));
 2bc:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <read_ID+0x1>
 2c0:	cf de       	rcall	.-610    	; 0x60 <transmit_UART>
			transmit_UART((uint8_t)(read_ID&0xFF));
 2c2:	88 81       	ld	r24, Y
 2c4:	cd de       	rcall	.-614    	; 0x60 <transmit_UART>
			read_ID = 0;
 2c6:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <read_ID>
 2ca:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <read_ID+0x1>
 2ce:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <read_ID+0x2>
 2d2:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <read_ID+0x3>
			reciver_full = 0;
 2d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <reciver_full>
 2da:	e3 cf       	rjmp	.-58     	; 0x2a2 <main+0xe>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
